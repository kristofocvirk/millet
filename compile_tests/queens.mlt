(* Check if placing a queen at column `col` in the current row is safe *)
let is_safe col solution =
  let rec check_safe row = function
    | [] -> true
    | q_col :: rest ->
      (* Check column and diagonal conflicts *)
      if q_col = col then false
      else
        (* Second if statement checks for diagonal conflict *)
        if abs (q_col - col) = row then false
        else check_safe (row + 1) rest
  in
  check_safe 1 solution

(* Recursively count the number of solutions to the N-Queens problem *)
let rec count_n_queens n solution =
  if length solution = n then 1 (* Found a valid solution *)
  else
    let rec try_columns col =
      if col > n then 0 (* No more columns to try *)
      else
        if is_safe col solution then
          (* If placing queen here is valid, continue and count further solutions *)
          count_n_queens n (col :: solution) + try_columns (col + 1)
        else
          try_columns (col + 1)
    in
    try_columns 1

(* Entry point to count the N-Queens solutions *)
let n_queens_count n =
  count_n_queens n []

(* Example usage *)
run
  let n = 8 in
  let solution_count = n_queens_count n in
  solution_count
