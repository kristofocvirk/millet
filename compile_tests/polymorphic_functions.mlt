let rec fact n =
  if n = 0 then 1 else n * fact (n - 1)

let fib n =
  let rec aux n a b =
    if n = 0 then a else aux (n - 1) b (a + b)
  in
  aux n 0 1

let rec gcd_rec m n =
  match n with
  | 0 -> m
  | _ -> gcd_rec n (m mod n)

let binary_op f a b =
    f a b

let unary_op f a =
    f a 

run (gcd_rec (fib 20) (fact 11))

run fib 20

run 
    binary_op ( + ) 1 2

run 
    unary_op ( ~- ) 1