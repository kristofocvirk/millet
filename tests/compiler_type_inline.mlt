type nat =
  | Zero
  | Succ of nat

let rec add m n =
  match m with
  | Zero -> n
  | Succ m' -> Succ (add m' n)

let rec multiply m n =
  match m with
  | Zero -> Zero
  | Succ m' -> add n (multiply m' n)

run
  let six = (Succ (Succ (Succ (Succ (Succ (Succ Zero)))))) in
  let seven = Succ six in
  let forty_two = multiply six seven in
  forty_two